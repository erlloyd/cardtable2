name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write  # Needed to create tags

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run typecheck

      - name: Check formatting
        run: pnpm run format:check

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20', '22']

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm run test

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20', '22']

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: pnpm --filter @cardtable2/app build

      - name: Build server
        run: pnpm --filter @cardtable2/server build

      - name: Upload app artifacts
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: app-dist
          path: app/dist/

      - name: Upload server artifacts
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: server-dist
          path: server/dist/

  check-changes:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      app_changed: ${{ steps.changes.outputs.app_changed }}
      server_changed: ${{ steps.changes.outputs.server_changed }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to find tags

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check what changed
        id: changes
        run: |
          # Find last deployment tag
          LAST_TAG=$(git describe --tags --match="v*" --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "Comparing against last deployment tag: $LAST_TAG"
            COMPARE_REF="$LAST_TAG"
          else
            echo "No deployment tags found, defaulting to deploy both"
            echo "app_changed=true" >> $GITHUB_OUTPUT
            echo "server_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if app or its dependencies changed using PNPM filter
          if pnpm --filter "@cardtable2/app...[$COMPARE_REF]" list --depth=0 2>/dev/null | grep -q "@cardtable2/app"; then
            echo "app_changed=true" >> $GITHUB_OUTPUT
            echo "App or its dependencies changed since $COMPARE_REF"
          else
            echo "app_changed=false" >> $GITHUB_OUTPUT
            echo "No app changes since $COMPARE_REF"
          fi

          # Check if server or its dependencies changed using PNPM filter
          if pnpm --filter "@cardtable2/server...[$COMPARE_REF]" list --depth=0 2>/dev/null | grep -q "@cardtable2/server"; then
            echo "server_changed=true" >> $GITHUB_OUTPUT
            echo "Server or its dependencies changed since $COMPARE_REF"
          else
            echo "server_changed=false" >> $GITHUB_OUTPUT
            echo "No server changes since $COMPARE_REF"
          fi

  deploy-app:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, check-changes]
    if: needs.check-changes.outputs.app_changed == 'true'

    steps:
      - name: Download app artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-dist
          path: app/dist/

      - name: Deploy App
        run: |
          echo "ðŸš€ Deploying app to production..."
          echo "App artifacts:"
          ls -la app/dist/
          echo "âœ… App deployment complete!"

  deploy-server:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, check-changes]
    if: needs.check-changes.outputs.server_changed == 'true'

    steps:
      - name: Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-dist
          path: server/dist/

      - name: Deploy Server
        run: |
          echo "ðŸš€ Deploying server to production..."
          echo "Server artifacts:"
          ls -la server/dist/
          echo "âœ… Server deployment complete!"

  tag-successful-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-app, deploy-server]
    if: always() && (needs.deploy-app.result == 'success' || needs.deploy-app.result == 'skipped') && (needs.deploy-server.result == 'success' || needs.deploy-server.result == 'skipped') && (needs.deploy-app.result == 'success' || needs.deploy-server.result == 'success')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tagging

      - name: Determine next version
        id: version
        run: |
          # Find the next version number
          LAST_TAG=$(git describe --tags --match="v*" --abbrev=0 2>/dev/null || echo "v0")
          if [ "$LAST_TAG" = "v0" ]; then
            NEXT_VERSION="v1"
          else
            # Extract number from last tag and increment
            LAST_NUM=$(echo "$LAST_TAG" | sed 's/^v//')
            NEXT_NUM=$((LAST_NUM + 1))
            NEXT_VERSION="v$NEXT_NUM"
          fi
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Creating deployment tag: $NEXT_VERSION"

      - name: Create deployment tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.version.outputs.next_version }}
          message: "Successful deployment: ${{ steps.version.outputs.next_version }}"