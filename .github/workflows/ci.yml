name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run typecheck

      - name: Check formatting
        run: pnpm run format:check

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20', '22']

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm run test

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20', '22']

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: pnpm --filter @cardtable2/app build

      - name: Build server
        run: pnpm --filter @cardtable2/server build

      - name: Upload app artifacts
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: app-dist
          path: app/dist/

      - name: Upload server artifacts
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: server-dist
          path: server/dist/

  check-changes:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      app_changed: ${{ steps.changes.outputs.app_changed }}
      server_changed: ${{ steps.changes.outputs.server_changed }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison

      - name: Check what changed
        id: changes
        run: |
          # Get changed files since last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Default to deploying both
          APP_CHANGED=false
          SERVER_CHANGED=false

          # Check for app-only changes
          if echo "$CHANGED_FILES" | grep -q "^app/" && ! echo "$CHANGED_FILES" | grep -qE "^(server/|shared/|\.github/|scripts/|package\.json|pnpm-|\.)" ; then
            APP_CHANGED=true
          # Check for server-only changes
          elif echo "$CHANGED_FILES" | grep -q "^server/" && ! echo "$CHANGED_FILES" | grep -qE "^(app/|shared/|\.github/|scripts/|package\.json|pnpm-|\.)" ; then
            SERVER_CHANGED=true
          # Otherwise deploy both (shared changes, root changes, or mixed changes)
          else
            APP_CHANGED=true
            SERVER_CHANGED=true
          fi

          echo "app_changed=$APP_CHANGED" >> $GITHUB_OUTPUT
          echo "server_changed=$SERVER_CHANGED" >> $GITHUB_OUTPUT
          echo "Deployment decision: app=$APP_CHANGED, server=$SERVER_CHANGED"

  deploy-app:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, check-changes]
    if: needs.check-changes.outputs.app_changed == 'true'

    steps:
      - name: Download app artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-dist
          path: app/dist/

      - name: Deploy App
        run: |
          echo "ðŸš€ Deploying app to production..."
          echo "App artifacts:"
          ls -la app/dist/
          echo "âœ… App deployment complete!"

  deploy-server:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, check-changes]
    if: needs.check-changes.outputs.server_changed == 'true'

    steps:
      - name: Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-dist
          path: server/dist/

      - name: Deploy Server
        run: |
          echo "ðŸš€ Deploying server to production..."
          echo "Server artifacts:"
          ls -la server/dist/
          echo "âœ… Server deployment complete!"